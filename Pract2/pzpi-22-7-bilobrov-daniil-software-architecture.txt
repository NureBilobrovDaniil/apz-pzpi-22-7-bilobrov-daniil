Міністерство освіти і науки України
Харківський національний університет радіоелектроніки







Звіт 
до практичного заняття №2 з дисципліни 
«Архітектура програмного забезпечення» 
На тему: «Архітектура відомих програмних систем»







Виконав:	Перевірив:
Ст. гр. ПЗПІ-22-7 	ст. викладач кафедри ПІ
Білобров Д. Є.	Сокорчук Ігор Петрович







Харків 2024
1.	Мета роботи
1.1	Історія змін

Зміни в документі нотуються до таблиці 1.1.

Таблиця 1.1 – Історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	21.08.25	0.1	Створено розділ «Історія змін»
2	21.08.25	0.1	Створено розділ «Завдання до практичної роботи»
3	21.08.25	0.1	Створено розділ «Хід роботи»
4	21.08.25	0.1	Створено розділ «Висновки»
5	21.08.25	0.1	Додано додаток А з посиланням на відеоролик
6	21.08.25	0.1	Додано додаток Б зі слайдами презентації
7	21.08.25	0.1	Додано додаток В з програмним кодом
  

2.	Завдання
o	Розібратися у структурі ChatGPT як програмної системи.  
o	Дослідити архітектурні патерни, які використовуються.  
o	Пояснити особливості архітектури з точки зору масштабованості та продуктивності.  
o	Підготувати презентацію з поясненням основних компонентів системи.

3.	Хід роботи 
3.1 Загальна інформація
ChatGPT — це великий мовний чат-бот, створений OpenAI на основі моделі GPT (Generative Pre-trained Transformer). Поточна архітектура базується на GPT-4.  
3.2 Компоненти архітектури  
- Transformer-архітектура – основа GPT.  
- Tokenizer – компонент, який розбиває текст на токени для обробки.  
- Inference Engine – механізм обробки запитів користувача в реальному часі.  
- Training Pipeline – включає в себе попереднє тренування (pretraining) та донавчання (fine-tuning).  
- API Gateway – обробка запитів через інтерфейс OpenAI API.  
- Масштабована хмарна інфраструктура (Azure) – забезпечує продуктивність і доступність.  

3.3 Патерни архітектури  
- Microservices – система побудована з незалежних сервісів.  
- Event-driven architecture – асинхронна обробка запитів.  
- Model-Serving Pattern – виділений сервер для обробки ML моделей.  
- API Gateway Pattern – централізована точка входу до системи.  

3.4 Додаткові особливості  
- Система оптимізована для масштабування запитів мільйонів користувачів.  
- GPT моделі оптимізовані з використанням RLHF (Reinforcement Learning from Human Feedback).  
 
4.	Висновки  
ChatGPT є прикладом складної, але водночас елегантно спроєктованої архітектури програмного забезпечення, яка поєднує сучасні досягнення у сфері штучного інтелекту, хмарних обчислень та архітектурних патернів. В її основі лежить трансформер-модель GPT, здатна обробляти природну мову з високою точністю та контекстуальною глибиною. 
Особливістю системи є її модульна структура, побудована за принципами мікросервісної архітектури, що дозволяє легко масштабувати окремі компоненти, забезпечувати високу доступність та гнучко керувати навантаженням. Важливу роль відіграє API Gateway, який координує потік запитів і слугує єдиною точкою входу в систему, що підвищує безпеку та контроль.
Таким чином, ChatGPT демонструє, як сучасні технології й архітектурні рішення можуть бути інтегровані у потужну, масштабовану та надійну систему, орієнтовану на реальні потреби користувача. 
ДОДАТОК А
Хронологічний опис та посилання

Відеозапис доповіді на YouTube: https://www.youtube.com/watch?v=icW5qPDBmQE

Хронологічний опис доповіді:
00:00 Вступна частина
 Представлення себе, теми презентації та короткий вступ. Озвучено, що буде розглянуто архітектуру системи ChatGPT як приклад складного сучасного ПЗ.
00:15 Що таке ChatGPT
 Описується, що таке ChatGPT — чат-бот на базі GPT-4, здатний генерувати відповіді у діалозі. Згадується компанія OpenAI та її розробки.
00:30 Загальна архітектура системи
 Пояснення основних компонентів системи: API Gateway, Auth Service, Tokenizer, Inference Engine та хмарна інфраструктура.
01:15 Компонент API Gateway
 Розповідається про роль API Gateway: обробка вхідних запитів, перевірка авторизації, передача до сервісів.
00:53 Компонент Tokenizer
 Описується, як текст розбивається на токени для роботи моделі. Наводиться приклад з перетворенням слова "Hello" у токен.
01:03 Inference Engine
 Пояснюється, що Inference Engine — це серце моделі, де генерується відповідь. Акцент на трансформерах і GPU.
01:34 Архітектурний патерн Microservices
 Розглядається, як система складається з окремих сервісів — генерація, логування, кешування, авторизація.
01:49 Архітектурний патерн API Gateway
 Детальніше пояснюється, як API Gateway виступає єдиною точкою входу, виконує захист, розподіляє запити.
02:00 Архітектурний патерн Model-Serving
 Опис серверів, які спеціалізуються на обробці запитів до моделей GPT. Пояснення масштабування.
02:18 Приклад коду (Gateway)
 Пояснюється приклад API-запиту в коді Python: перевірка авторизації, передача запиту, отримання відповіді.
02:35 Висновки
 Загальні висновки: ChatGPT — приклад масштабованої, ефективної системи, що об'єднує AI та сучасні архітектурні патерни. 
ДОДАТОК Б
Презентація на тему «Архітектура відомих програмних систем».

 
Рисунок Б.1 – Титульний слайд

 
Рисунок Б.2 – Огляд системи ChatGPT

 
Рисунок Б.3 – Архітектура системи (огляд)

 
Рисунок Б.4 – Компонент API Gateway

 
Рисунок Б.5 – Компонент Tokenizer

 
Рисунок Б.6 – Компонент Inference Engine

 
Рисунок Б.7 – Архітектурний патерн Microservices


 
Рисунок Б.8 – Архітектурний патерн API Gateway

 
Рисунок Б.9 – Архітектурний патерн Model-Serving

 
Рисунок Б.10 – Приклад коду (Gateway)

 
Рисунок Б.11 – Висновки

 
Рисунок Б.12 – Джерела інформації
 

ДОДАТОК В
Програмний код, використаний як приклад у презентації.

# gateway.py — API Gateway для ChatGPT-подібного сервісу
from fastapi import FastAPI, Request
from services.auth_service import is_authenticated
from services.chat_service import get_response

app = FastAPI()

@app.post("/chat")
async def chat_endpoint(request: Request):
    data = await request.json()
    user_input = data.get("message")
    
    # Авторизація користувача
    if not is_authenticated(request):
        return {"error": "Unauthorized"}

    # Отримання відповіді з моделі
    response = get_response(user_input)
    return {"response": response}
# services/chat_service.py — Обробка повідомлення через модель
def get_response(message: str) -> str:
    # У реальному світі тут була б інтеграція з GPT через API
    if "hello" in message.lower():
        return "Hi there! How can I assist you today?"
    return "Sorry, I didn't quite get that."
# services/auth_service.py — Імітація авторизації
def is_authenticated(request) -> bool:
    # Простий приклад: авторизовано, якщо в заголовку є "X-Auth-Token"
    return "X-Auth-Token" in request.headers
